总体来说设计模式分为三大类：
【创建型模式】，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。
【结构型模式】，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。
【行为型模式】，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。
//其实还有两类：并发型模式和线程池模式。

//////////////  创建型模式  //////////////
<!----- 工厂方法模式 、抽象工厂模式----->
    对对象的单个创建，抽出公共的创建方法，多使用接口和抽象类。




//////////////  结构型模式  //////////////
<!----- 适配器模式----->
    适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造成的类的兼容性问题。
主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。

<!----- 装饰者模式（感觉用处不大）------>
类A/B/C实现一个公共接口，并重写方法，当想扩展某个类的功能时，
装饰器模式的应用场景：
1、需要扩展一个类的功能。
2、动态的为一个对象增加功能，而且还能动态|撤销。（继承不能做到这一点，继承的功能是静态的，不能动态增删。）
缺点：产生过多相似的对象，不易排错！

<!----- 代理模式(Proxy) ----->
